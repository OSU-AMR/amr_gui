#include "riptide_rviz/BaggingPanel.hpp"
#include <iostream>
#include <filesystem>
#include <chrono>
#include <string>
#include <rviz_common/display_context.hpp>
#include <rviz_common/logging.hpp>

using namespace std::chrono_literals;
using namespace std::placeholders;

namespace riptide_rviz
{

    BaggingPanel::BaggingPanel(QWidget *parent) : rviz_common::Panel(parent)
    {
        setFocusPolicy(Qt::ClickFocus);
        mainParent = parent;

        uiPanel = new Ui_BaggingPanel();
        uiPanel->setupUi(this);

        auto options = rclcpp::NodeOptions().arguments({});
        clientNode = std::make_shared<rclcpp::Node>("riptide_rviz_bagging", options);
    }

    void BaggingPanel::onInitialize()
    {
        if (topicModel != nullptr) {
            delete topicModel;
            topicModel = nullptr;
        }

        try {
            topicModel = new BaggingTopicModel("/home/rjp5th/osu-uwrt/development/software/src/riptide_gui/riptide_rviz/riptide_rviz/recipies/bagging-test.xml");
        }
        catch (BaggingTopicGroup::ParseError &e) {
            // TODO: Handle error
            throw e;
        }

        // refresh UI elements so they start displayed correctly
        baggingListRefresh();

        // create a spin timer
        spinTimer = new QTimer(this);
        connect(spinTimer, &QTimer::timeout, [this](void)
                { rclcpp::spin_some(clientNode); });
        spinTimer->start(50);

        // Connect UI signals for bagging
        connect(uiPanel->baggingConfigure, &QPushButton::clicked, [this](void)
                { baggingConfigure(); });
        connect(uiPanel->baggingRefresh, &QPushButton::clicked, [this](void)
                { baggingListRefresh(); });
        connect(uiPanel->baggingStart, &QPushButton::clicked, [this](void)
                { startBagging(); });
        connect(uiPanel->baggingStop, &QPushButton::clicked, [this](void)
                { stopBagging(); });
        connect(uiPanel->baggingHost, SIGNAL(currentIndexChanged(int)), SLOT(handleBaggingPanelHost(int)));
    }

    void BaggingPanel::load(const rviz_common::Config &config)
    {
        rviz_common::Panel::load(config);
    }

    void BaggingPanel::save(rviz_common::Config config) const
    {
        rviz_common::Panel::save(config);
    }

    bool BaggingPanel::event(QEvent *event)
    {
    }

    BaggingPanel::~BaggingPanel()
    {
        // master window control removal
        delete uiPanel;

        // remove the timers
        delete spinTimer;

        if (topicModel != nullptr) {
            delete topicModel;
            topicModel = nullptr;
        }
    }

    void BaggingPanel::baggingConfigure()
    {
        QDialog* selectionDialog = new QDialog();

        Ui_BaggingTopicSelection uiSelection;
        uiSelection.setupUi(selectionDialog);

        uiSelection.topicSelector->setModel(topicModel);

        selectionDialog->exec();

        delete selectionDialog;
    }

    void BaggingPanel::baggingListRefresh()
    {
        // TODO: Confirm before refresh

        // get the list of nodes available
        std::vector<std::string> names = clientNode->get_node_names();
        // clear the entries in the combo boxes
        uiPanel->baggingHost->clear();

        // filter names down to bagging nodes
        std::vector<std::string> baggingNodes;
        auto filt = [](const auto &s)
        { return s.find("_bagging_manager") != std::string::npos; };
        std::copy_if(names.begin(), names.end(), std::back_inserter(baggingNodes), filt);

        // make sure we have availiable nodes in the list, otherwise place a blank list entry
        if (baggingNodes.size() > 0)
        {
            uiPanel->baggingHost->addItem("None Selected");
            uiPanel->baggingHost->setCurrentIndex(0);
            for (std::string const &name : baggingNodes)
            {
                // push these into the combo box
                uiPanel->baggingHost->addItem(QString::fromStdString(name.substr(0, name.find_last_of('b') - 1)));
            }
            uiPanel->baggingHost->setEnabled(true);
        }
        else
        {
            uiPanel->baggingHost->addItem("None");
            uiPanel->baggingHost->setEnabled(false);
        }

        uiPanel->baggingStart->setDisabled(true);
        uiPanel->baggingStop->setDisabled(true);
        uiPanel->baggingStatus->setText("No Panel Selected");
    }

    void BaggingPanel::handleBaggingPanelHost(int selection)
    {
        std::string targetNode = uiPanel->baggingHost->itemText(selection).toStdString();

        // Remove previous subscription
        if (baggingStateSub != nullptr) {
            baggingStateSub.reset();
        }

        // make sure the event wasnt generated by us
        if (targetNode != "None Selected")
        {
            //Selected host is valid, now create action server clients (?)
            baggingStateSub = clientNode->create_subscription<std_msgs::msg::Bool>(
                targetNode + "/bagging_status", rclcpp::SystemDefaultsQoS(), std::bind(&BaggingPanel::baggingStateCallback, this, _1)
            );

            uiPanel->baggingStatus->setText("Waiting for status...");
        } else {
            uiPanel->baggingStatus->setText("No Panel Selected");
        }

        uiPanel->baggingStart->setDisabled(true);
        uiPanel->baggingStop->setDisabled(true);
    }

    void BaggingPanel::baggingStateCallback(const std_msgs::msg::Bool &msg)
    {
        uiPanel->baggingStatus->setText((msg.data ? "Logging" : "Stopped"));

        uiPanel->baggingStart->setEnabled(!msg.data);
        uiPanel->baggingStop->setEnabled(msg.data);
    }

    void BaggingPanel::startBagging()
    {
        uiPanel->baggingStart->setEnabled(false);
        uiPanel->baggingStop->setEnabled(false);
        // TODO: Perform service call
    }

    void BaggingPanel::stopBagging()
    {
        uiPanel->baggingStart->setEnabled(false);
        uiPanel->baggingStop->setEnabled(false);

        // TODO: Perform service call
    }

} // namespace riptide_rviz

#include <pluginlib/class_list_macros.hpp> // NOLINT
PLUGINLIB_EXPORT_CLASS(riptide_rviz::BaggingPanel, rviz_common::Panel);